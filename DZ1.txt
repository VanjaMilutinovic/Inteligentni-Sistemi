import math
import random
from itertools import permutations

import pygame
import os
import config

from queue import PriorityQueue


class BaseSprite(pygame.sprite.Sprite):
    images = dict()

    def __init__(self, x, y, file_name, transparent_color=None, wid=config.SPRITE_SIZE, hei=config.SPRITE_SIZE):
        pygame.sprite.Sprite.__init__(self)
        if file_name in BaseSprite.images:
            self.image = BaseSprite.images[file_name]
        else:
            self.image = pygame.image.load(os.path.join(config.IMG_FOLDER, file_name)).convert()
            self.image = pygame.transform.scale(self.image, (wid, hei))
            BaseSprite.images[file_name] = self.image
        # making the image transparent (if needed)
        if transparent_color:
            self.image.set_colorkey(transparent_color)
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)


class Surface(BaseSprite):
    def __init__(self):
        super(Surface, self).__init__(0, 0, 'terrain.png', None, config.WIDTH, config.HEIGHT)


class Coin(BaseSprite):
    def __init__(self, x, y, ident):
        self.ident = ident
        super(Coin, self).__init__(x, y, 'coin.png', config.DARK_GREEN)

    def get_ident(self):
        return self.ident

    def position(self):
        return self.rect.x, self.rect.y

    def draw(self, screen):
        text = config.COIN_FONT.render(f'{self.ident}', True, config.BLACK)
        text_rect = text.get_rect(center=self.rect.center)
        screen.blit(text, text_rect)


class CollectedCoin(BaseSprite):
    def __init__(self, coin):
        self.ident = coin.ident
        super(CollectedCoin, self).__init__(coin.rect.x, coin.rect.y, 'collected_coin.png', config.DARK_GREEN)

    def draw(self, screen):
        text = config.COIN_FONT.render(f'{self.ident}', True, config.RED)
        text_rect = text.get_rect(center=self.rect.center)
        screen.blit(text, text_rect)


class Agent(BaseSprite):
    def __init__(self, x, y, file_name):
        super(Agent, self).__init__(x, y, file_name, config.DARK_GREEN)
        self.x = self.rect.x
        self.y = self.rect.y
        self.step = None
        self.travelling = False
        self.destinationX = 0
        self.destinationY = 0

    def set_destination(self, x, y):
        self.destinationX = x
        self.destinationY = y
        self.step = [self.destinationX - self.x, self.destinationY - self.y]
        magnitude = math.sqrt(self.step[0] ** 2 + self.step[1] ** 2)
        self.step[0] /= magnitude
        self.step[1] /= magnitude
        self.step[0] *= config.TRAVEL_SPEED
        self.step[1] *= config.TRAVEL_SPEED
        self.travelling = True

    def move_one_step(self):
        if not self.travelling:
            return
        self.x += self.step[0]
        self.y += self.step[1]
        self.rect.x = self.x
        self.rect.y = self.y
        if abs(self.x - self.destinationX) < abs(self.step[0]) and abs(self.y - self.destinationY) < abs(self.step[1]):
            self.rect.x = self.destinationX
            self.rect.y = self.destinationY
            self.x = self.destinationX
            self.y = self.destinationY
            self.travelling = False

    def is_travelling(self):
        return self.travelling

    def place_to(self, position):
        self.x = self.destinationX = self.rect.x = position[0]
        self.y = self.destinationX = self.rect.y = position[1]

    # coin_distance - cost matrix
    # return value - list of coin identifiers (containing 0 as first and last element, as well)
    def get_agent_path(self, coin_distance):
        pass


class Aki(Agent):
    def __init__(self, x, y, file_name):
        super().__init__(x, y, file_name)

    def get_agent_path(self, coin_distance: list):
        path = [0]
        curr = 0
        sum_visited = 0
        n = len(coin_distance)
        final_sum = n * (n - 1) / 2

        while sum_visited < final_sum:

            min_dist = math.inf
            next_coin = -1
            for i in range(n):

                if i != curr and i not in path:

                    if min_dist > coin_distance[i][curr]:
                        min_dist, next_coin = coin_distance[i][curr], i

            path.append(next_coin)
            sum_visited += next_coin
            curr = next_coin

        return path + [0]


class Jocke(Agent):
    def __init__(self, x, y, file_name):
        super().__init__(x, y, file_name)

    def get_agent_path(self, coin_distance: list):
        elements = list(range(1, len(coin_distance)))
        all_permutations = list(permutations(elements))

        path = []
        min_cost = math.inf

        for permutation in all_permutations:

            perm_cost = 0
            first = True
            previous = -1
            for element in permutation:
                if first:
                    first = False
                    perm_cost += coin_distance[element][0]
                else:
                    perm_cost += coin_distance[element][previous]

                previous = element
            perm_cost += coin_distance[0][previous]

            if perm_cost < min_cost:
                min_cost = perm_cost
                path = list(permutation)

        return [0] + path + [0]


class PathNode:
    def __init__(self, path: list, path_cost, collected_coins):
        self.path = path
        self.path_cost = path_cost
        self.collected_coins = collected_coins
        self.heur = 0

    def calculate_heur(self, coin_distance: list[list[int]]):
        unvisited: list[int] = []
        visited = []
        for elem in self.path:
            visited.append(elem)

        # naci neobidjene elemente
        # for i in range(len(coin_distance)):
        #     if i not in self.path:
        #         unvisited.append(i)
        # if len(unvisited) == 0:
        #     return 0

        # izracunati trenutnu tezinu stabla
        min_sum = 0
        # if len(visited) > 1:
        #     for i in range(1, len(visited)):
        #         min_sum += coin_distance[i][i-1]

        for element in unvisited:
            closest = math.inf
            for visited_elem in self.path:
                if closest > coin_distance[visited_elem][element]:
                    closest = coin_distance[visited_elem][element]
            min_sum += closest
            visited.append(element)
            unvisited.remove(element)

        self.heur = min_sum

    def __str__(self) -> str:
        return str(self.path) + " " + str(self.path_cost) + " " + str(self.collected_coins) + " " + str(self.heur)

    def __lt__(self, other):
        self_priority = (self.path_cost, self.collected_coins, self.path[-1])
        other_priority = (other.path_cost, other.collected_coins, other.path[-1])
        return self_priority < other_priority


class Uki(Agent):
    def __init__(self, x, y, file_name):
        super().__init__(x, y, file_name)

    def get_agent_path(self, coin_distance):
        paths = PriorityQueue()
        path = PathNode([0], 0, 1)
        paths.put(path)
        n = len(coin_distance)

        while not paths.empty():
            node = paths.get()
            last_node = node.path[-1]

            if node.collected_coins == n:
                temp = PathNode(node.path + [0], node.path_cost + coin_distance[node.path[-1]][0],
                                node.collected_coins + 1)
                paths.put(temp)
            if node.collected_coins == n + 1:
                return node.path

            for i in range(1, n, 1):
                if i not in node.path:
                    temp = PathNode(node.path + [i], node.path_cost + coin_distance[last_node][i],
                                    node.collected_coins + 1)
                    paths.put(temp)


class Micko(Agent):
    def __init__(self, x, y, file_name):
        super().__init__(x, y, file_name)

    def get_agent_path(self, coin_distance):
        paths = PriorityQueue()
        path = PathNode([0], 0, 1)
        path.calculate_heur(coin_distance)
        paths.put(path)
        n = len(coin_distance)
        while not paths.empty():
            node = paths.get()
            last_node = node.path[-1]

            if node.collected_coins == n:
                temp = PathNode(node.path + [0],
                                node.path_cost + coin_distance[node.path[-1]][0] - node.heur,
                                node.collected_coins + 1)
                temp.calculate_heur(coin_distance)
                temp.path_cost += temp.heur
                paths.put(temp)

            if node.collected_coins == n + 1:
                return node.path

            for i in range(n):
                if i not in node.path:
                    temp = PathNode(node.path + [i],
                                    node.path_cost + coin_distance[last_node][i] - node.heur,
                                    node.collected_coins + 1)
                    temp.calculate_heur(coin_distance)
                    temp.path_cost += temp.heur
                    paths.put(temp)

        return node.path + [0]


class ExampleAgent(Agent):
    def __init__(self, x, y, file_name):
        super().__init__(x, y, file_name)

    def get_agent_path(self, coin_distance):
        path = [i for i in range(1, len(coin_distance))]
        random.shuffle(path)
        return [0] + path + [0]
